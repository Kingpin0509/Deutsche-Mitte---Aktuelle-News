'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthContainer = exports.USER_CHANGED = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 Oursky Ltd.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.



var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _util = require('./util');

var _error = require('./error');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var USER_CHANGED = exports.USER_CHANGED = 'userChanged';

var AuthContainer = exports.AuthContainer = function () {
  function AuthContainer(container) {
    _classCallCheck(this, AuthContainer);

    this.container = container;

    this._accessToken = null;
    this._user = null;
    this._getAccessToken();
  }

  _createClass(AuthContainer, [{
    key: 'onUserChanged',
    value: function onUserChanged(listener) {
      this.container.ee.on(USER_CHANGED, listener);
      return new _util.EventHandle(this.container.ee, USER_CHANGED, listener);
    }
  }, {
    key: 'signupWithUsername',
    value: function signupWithUsername(username, password) {
      return this._signup(username, null, password);
    }
  }, {
    key: 'signupWithEmail',
    value: function signupWithEmail(email, password) {
      return this._signup(null, email, password);
    }
  }, {
    key: 'signupWithUsernameAndProfile',
    value: function signupWithUsernameAndProfile(username, password) {
      var _this = this;

      var profile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      return this.signupWithUsername(username, password).then(function (user) {
        return _this._createProfile(user, profile);
      });
    }
  }, {
    key: 'signupWithEmailAndProfile',
    value: function signupWithEmailAndProfile(email, password) {
      var _this2 = this;

      var profile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      return this.signupWithEmail(email, password).then(function (user) {
        return _this2._createProfile(user, profile);
      });
    }
  }, {
    key: 'signupAnonymously',
    value: function signupAnonymously() {
      return this._signup(null, null, null);
    }
  }, {
    key: 'loginWithUsername',
    value: function loginWithUsername(username, password) {
      return this.container.makeRequest('auth:login', {
        username: username,
        password: password
      }).then(this._authResolve.bind(this));
    }
  }, {
    key: 'loginWithEmail',
    value: function loginWithEmail(email, password) {
      return this.container.makeRequest('auth:login', {
        email: email,
        password: password
      }).then(this._authResolve.bind(this));
    }
  }, {
    key: 'loginWithProvider',
    value: function loginWithProvider(provider, authData) {
      return this.container.makeRequest('auth:login', {
        provider: provider,
        auth_data: authData // eslint-disable-line camelcase
      }).then(this._authResolve.bind(this));
    }
  }, {
    key: 'logout',
    value: function logout() {
      var _this3 = this;

      return this.container.push.unregisterDevice().then(function () {
        _this3.container.clearCache();
        return _this3.container.makeRequest('auth:logout', {});
      }, function (error) {
        if (error.code === _error.ErrorCodes.InvalidArgument && error.message === 'Missing device id') {
          _this3.container.clearCache();
          return _this3.container.makeRequest('auth:logout', {});
        }
        return Promise.reject(error);
      }).then(function () {
        return Promise.all([_this3._setAccessToken(null), _this3._setUser(null)]).then(function () {
          return null;
        });
      }, function (err) {
        return _this3._setAccessToken(null).then(function () {
          return Promise.reject(err);
        });
      });
    }
  }, {
    key: 'whoami',
    value: function whoami() {
      return this.container.makeRequest('me', {}).then(this._authResolve.bind(this));
    }
  }, {
    key: 'changePassword',
    value: function changePassword(oldPassword, newPassword) {
      var invalidate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (invalidate) {
        throw Error('Invalidate is not yet implemented');
      }
      return this.container.makeRequest('auth:password', {
        old_password: oldPassword, // eslint-disable-line camelcase
        password: newPassword
      }).then(this._authResolve.bind(this));
    }
  }, {
    key: 'saveUser',
    value: function saveUser(user) {
      var _this4 = this;

      var payload = {
        _id: user.id, // eslint-disable-line camelcase
        email: user.email,
        username: user.username
      };
      if (user.roles) {
        payload.roles = _lodash2.default.map(user.roles, function (perRole) {
          return perRole.name;
        });
      }
      return this.container.makeRequest('user:update', payload).then(function (body) {
        var newUser = _this4._User.fromJSON(body.result);
        var currentUser = _this4.currentUser;

        if (newUser && currentUser && newUser.id === currentUser.id) {
          return _this4._setUser(body.result);
        } else {
          return newUser;
        }
      });
    }
  }, {
    key: 'getUsersByEmail',
    value: function getUsersByEmail(emails) {
      return this._getUsersBy(emails, null);
    }
  }, {
    key: 'getUsersByUsername',
    value: function getUsersByUsername(usernames) {
      return this._getUsersBy(null, usernames);
    }
  }, {
    key: 'discoverUserByEmails',
    value: function discoverUserByEmails(emails) {
      return this.container.publicDB.query(new this._Query(this.container.UserRecord).havingEmails(emails));
    }
  }, {
    key: 'discoverUserByUsernames',
    value: function discoverUserByUsernames(usernames) {
      return this.container.publicDB.query(new this._Query(this.container.UserRecord).havingUsernames(usernames));
    }
  }, {
    key: '_getAccessToken',
    value: function _getAccessToken() {
      var _this5 = this;

      return this.container.store.getItem('skygear-accesstoken').then(function (token) {
        _this5._accessToken = token;
        return token;
      }, function (err) {
        console.warn('Failed to get access', err);
        _this5._accessToken = null;
        return null;
      });
    }
  }, {
    key: '_setAccessToken',
    value: function _setAccessToken(value) {
      this._accessToken = value;
      var setItem = value === null ? this.container.store.removeItem('skygear-accesstoken') : this.container.store.setItem('skygear-accesstoken', value);
      return setItem.then(function () {
        return value;
      }, function (err) {
        console.warn('Failed to persist accesstoken', err);
        return value;
      });
    }
  }, {
    key: '_signup',
    value: function _signup(username, email, password) {
      return this.container.makeRequest('auth:signup', {
        username: username,
        email: email,
        password: password
      }).then(this._authResolve.bind(this));
    }
  }, {
    key: '_authResolve',
    value: function _authResolve(body) {
      var _this6 = this;

      return Promise.all([this._setUser(body.result), this._setAccessToken(body.result.access_token)]).then(function () {
        _this6.container.pubsub._reconfigurePubsubIfNeeded();
        return _this6.currentUser;
      });
    }
  }, {
    key: '_createProfile',
    value: function _createProfile(user, profile) {
      var record = new this.container.UserRecord(_extends({
        _id: 'user/' + user.id
      }, profile));
      return this.container.publicDB.save(record);
    }
  }, {
    key: '_getUsersBy',
    value: function _getUsersBy(emails, usernames) {
      var _this7 = this;

      return this.container.makeRequest('user:query', {
        emails: emails,
        usernames: usernames
      }).then(function (body) {
        return body.result.map(function (r) {
          return new _this7._User(r.data);
        });
      });
    }
  }, {
    key: '_getUser',
    value: function _getUser() {
      var _this8 = this;

      return this.container.store.getItem('skygear-user').then(function (userJSON) {
        var attrs = JSON.parse(userJSON);
        _this8._user = _this8._User.fromJSON(attrs);
      }, function (err) {
        console.warn('Failed to get user', err);
        _this8._user = null;
        return null;
      });
    }
  }, {
    key: '_setUser',
    value: function _setUser(attrs) {
      var _this9 = this;

      var value = void 0;
      if (attrs !== null) {
        this._user = new this._User(attrs);
        value = JSON.stringify(this._user.toJSON());
      } else {
        this._user = null;
        value = null;
      }

      var setItem = value === null ? this.container.store.removeItem('skygear-user') : this.container.store.setItem('skygear-user', value);
      return setItem.then(function () {
        _this9.container.ee.emit(USER_CHANGED, _this9._user);
        return value;
      }, function (err) {
        console.warn('Failed to persist user', err);
        return value;
      });
    }
  }, {
    key: 'currentUser',
    get: function get() {
      return this._user;
    }
  }, {
    key: 'accessToken',
    get: function get() {
      return this._accessToken;
    }
  }, {
    key: '_User',
    get: function get() {
      return this.container.User;
    }
  }, {
    key: '_Query',
    get: function get() {
      return this.container.Query;
    }
  }]);

  return AuthContainer;
}();